'use client'

import Link from "next/link";
import { useState, useEffect } from "react";

interface Article {
  id: number;
  convertedTitle: string;
  convertedContent: string;
  convertedSummary: string;
  category: string;
  createdAt: string;
  hasRead: boolean;
}

export default function ArticleDetail({ params }: { params: Promise<{ id: string }> }) {
  const [article, setArticle] = useState<Article | null>(null);
  const [loading, setLoading] = useState(true);
  const [fontSize, setFontSize] = useState(18);
  const [showFurigana, setShowFurigana] = useState(true);
  const [articleId, setArticleId] = useState<string>('');
  const [userReactions, setUserReactions] = useState<string[]>([]);
  const [showQuestionForm, setShowQuestionForm] = useState(false);
  const [questionText, setQuestionText] = useState('');
  const [questions, setQuestions] = useState<Array<{
    id: string;
    articleId: string;
    question: string;
    childId: string;
    createdAt: string;
    status: string;
    parentAnswer?: string;
  }>>([]);
  const [fromParent, setFromParent] = useState(false);
  
  // URL„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search);
      const isFromParent = urlParams.get('from') === 'parent';
      setFromParent(isFromParent);
    }
  }, []);

  useEffect(() => {
    params.then(({ id }) => {
      setArticleId(id);
      fetchArticle(id);
      fetchQuestions(id);
    });
  }, [params]);

  const fetchArticle = async (id: string) => {
    try {
      // „Ç§„É≥„É°„É¢„É™„Çπ„Éà„Ç¢„Åã„ÇâË®ò‰∫ã„ÇíÂèñÂæó
      const response = await fetch(`/api/articles/child/child1`);
      const result = await response.json();
      
      if (result.success) {
        const foundArticle = result.articles.find((a: {
          id: number;
          convertedTitle: string;
          convertedContent: string;
          convertedSummary: string;
          category: string;
          createdAt: string;
          hasRead: boolean;
        }) => a.id.toString() === id);
        if (foundArticle) {
          setArticle({
            id: foundArticle.id,
            convertedTitle: foundArticle.convertedTitle,
            convertedContent: foundArticle.convertedContent,
            convertedSummary: foundArticle.convertedSummary,
            category: foundArticle.category,
            createdAt: foundArticle.createdAt,
            hasRead: foundArticle.hasRead
          });
        }
        setLoading(false);
        return;
      }
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éá„É¢Áî®„Çµ„É≥„Éó„É´„Éá„Éº„Çø
      const sampleArticles: { [key: string]: Article } = {
        '1': {
          id: 1,
          convertedTitle: "„ÅÜ„Å°„ÇÖ„ÅÜ„Åõ„Çì„Åå „Åã„Åõ„ÅÑ„Å´ „Åü„Å©„Çä„Å§„ÅÑ„Åü„ÇàÔºÅ",
          convertedContent: `NASA„Å®„ÅÑ„ÅÜ „ÅÜ„Å°„ÇÖ„ÅÜ„ÅÆ „Åë„Çì„Åç„ÇÖ„ÅÜ„Çí „Åó„Å¶„ÅÑ„Çã „Å®„Åì„Çç„Åå „Å§„Åè„Å£„Åü „ÅÜ„Å°„ÇÖ„ÅÜ„Åõ„Çì„Åå „Åã„Åõ„ÅÑ„Å®„ÅÑ„ÅÜ „Åª„Åó„Å´ „Å§„Åç„Åæ„Åó„Åü„ÄÇ

„Åì„ÅÆ „ÅÜ„Å°„ÇÖ„ÅÜ„Åõ„Çì„Å´„ÅØ „Åô„Åî„ÅÑ „Åç„Åã„ÅÑ„Åå „Å§„ÅÑ„Å¶„ÅÑ„Å¶„ÄÅ„Åã„Åõ„ÅÑ„ÅÆ „ÅÑ„Çç„ÅÑ„Çç„Å™„Åì„Å®„Çí „Åó„Çâ„Åπ„Åæ„Åô„ÄÇ

„Åã„Åõ„ÅÑ„ÅØ „ÅÇ„Åã„ÅÑ „ÅÑ„Çç„Çí „Åó„Å¶„ÅÑ„Çã „Åª„Åó„Åß„Åô„ÄÇ„Å°„Åç„ÇÖ„ÅÜ„Åã„Çâ „Å®„Å¶„ÇÇ „Å®„Åä„Åè„Å´ „ÅÇ„Çä„Åæ„Åô„ÄÇ

„ÇÄ„Åã„Åó „Åã„Åõ„ÅÑ„Å´ „Åø„Åö„Åå „ÅÇ„Å£„Åü„Åã„ÇÇ „Åó„Çâ„Åπ„Çã„ÇàÔºÅ„ÇÇ„Åó „Åø„Åö„Åå „ÅÇ„Å£„Åü„Å™„Çâ„ÄÅ„ÅÑ„Åç„ÇÇ„ÅÆ„ÇÇ „ÅÑ„Åü„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇ

„ÅÜ„Å°„ÇÖ„ÅÜ„Å´„ÅØ „Åæ„Å†„Åæ„Å† „Çè„Åã„Çâ„Å™„ÅÑ„Åì„Å®„Åå „Åü„Åè„Åï„Çì „ÅÇ„Çä„Åæ„Åô„ÄÇ„Åø„Çì„Å™„Åß „ÅÜ„Å°„ÇÖ„ÅÜ„ÅÆ „Å™„Åû„Çí „Å®„Åì„ÅÜÔºÅ`,
          convertedSummary: "„ÅÜ„Å°„ÇÖ„ÅÜ„Åõ„Çì„Åå „Åã„Åõ„ÅÑ„Å´ „ÅÑ„Å£„Å¶„ÄÅ„ÅÑ„Çç„ÅÑ„Çç „Åó„Çâ„Åπ„Çã„ÇàÔºÅ",
          category: "„Åã„Åå„Åè",
          createdAt: "2024-09-01T10:00:00Z",
          hasRead: false
        },
        '2': {
          id: 2,
          convertedTitle: "„ÅÇ„Åü„Çâ„Åó„ÅÑ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅÆ „Åª„Å≠„Åå „Åø„Å§„Åã„Å£„Åü„ÇàÔºÅ",
          convertedContent: `„Åå„Åè„Åó„ÇÉ„ÅÆ „Å≤„Å®„Åü„Å°„Åå„ÄÅ„ÅÑ„Åæ„Åæ„Åß „Åø„Åü„Åì„Å®„ÅÆ„Å™„ÅÑ „ÅÇ„Åü„Çâ„Åó„ÅÑ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅÆ „Åª„Å≠„Çí „Åø„Å§„Åë„Åæ„Åó„ÅüÔºÅ

„Åì„ÅÆ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅØ „Å®„Å¶„ÇÇ „Åä„Åä„Åç„Åè„Å¶„ÄÅ„Å§„Çà„Åù„ÅÜ„Å™ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„Å†„Å£„Åü„Åø„Åü„ÅÑ„Åß„Åô„ÄÇ

„Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅØ „ÅÑ„Åæ„Åã„Çâ „Å®„Å¶„ÇÇ „ÇÄ„Åã„Åó„ÄÅ„Å°„Åç„ÇÖ„ÅÜ„Å´ „Åô„Çì„Åß„ÅÑ„Åü „Åä„Åä„Åç„Å™ „ÅÑ„Åç„ÇÇ„ÅÆ„Åß„Åô„ÄÇ

„ÅÑ„Çç„ÅÑ„Çç„Å™ „Åó„ÇÖ„Çã„ÅÑ„ÅÆ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„Åå „ÅÑ„Åæ„Åó„Åü„ÄÇ„Åù„Çâ„Çí „Å®„Å∂ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÄÅ„Åø„Åö„ÅÆ „Å™„Åã„Å´ „Åô„ÇÄ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÄÅ„Çä„Åè„Åß „ÅÇ„Çã„Åè „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„Å™„Å©„ÄÇ

„Åì„ÅÆ „ÅÇ„Åü„Çâ„Åó„ÅÑ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅØ „Å©„Çì„Å™ „Åõ„ÅÑ„Åã„Å§„Çí „Åó„Å¶„ÅÑ„Åü„ÅÆ„Åã„Å™Ôºü„Å™„Å´„Çí „Åü„Åπ„Å¶„ÅÑ„Åü„ÅÆ„Åã„Å™Ôºü

„Åå„Åè„Åó„ÇÉ„ÅÆ „Å≤„Å®„Åå „ÅÑ„Å£„Åó„Çá„ÅÜ„Åë„Çì„ÇÅ„ÅÑ „Åó„Çâ„Åπ„Å¶„ÅÑ„Åæ„Åô„ÄÇ`,
          convertedSummary: "„ÅÇ„Åü„Çâ„Åó„ÅÑ „Åç„Çá„ÅÜ„Çä„ÇÖ„ÅÜ„ÅÆ „Åª„Å≠„Åå „Åø„Å§„Åã„Å£„Å¶„ÄÅ„Åå„Åè„Åó„ÇÉ„ÅÆ „Å≤„Å®„Åå „Åó„Çâ„Åπ„Å¶„ÅÑ„Çã„ÇàÔºÅ",
          category: "„Åã„Åå„Åè", 
          createdAt: "2024-08-30T15:30:00Z",
          hasRead: false
        }
      };

      setTimeout(() => {
        setArticle(sampleArticles[id] || null);
        setLoading(false);
      }, 500);
      
    } catch (error) {
      console.error('Ë®ò‰∫ãÂèñÂæó„Ç®„É©„Éº:', error);
      setLoading(false);
    }
  };

  const fetchQuestions = async (id: string) => {
    try {
      const response = await fetch(`/api/articles/${id}/question`);
      const result = await response.json();
      
      if (result.success) {
        // Â≠ê‰æõËá™Ë∫´„ÅÆË≥™Âïè„ÅÆ„Åø„ÇíË°®Á§∫
        const childQuestions = result.questions.filter((q: {
          id: string;
          childId: string;
          status: string;
          createdAt: string;
          parentAnswer?: string;
        }) => q.childId === 'child1');
        setQuestions(childQuestions);
      }
    } catch (error) {
      console.error('Ë≥™ÂïèÂèñÂæó„Ç®„É©„Éº:', error);
    }
  };

  const handleReaction = async (reaction: string) => {
    // Êó¢„Å´ÈÅ∏ÊäûÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØÂèñ„ÇäÊ∂à„Åó
    if (userReactions.includes(reaction)) {
      setUserReactions(prev => prev.filter(r => r !== reaction));
      return;
    }

    try {
      const response = await fetch(`/api/articles/${articleId}/reaction`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reaction: reaction,
          childId: 'child1'
        }),
      });
      
      const result = await response.json();
      
      if (result.success) {
        // ÊàêÂäüÊôÇ„Å´„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†
        setUserReactions(prev => [...prev, reaction]);
        
        // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏Ôºà„Çà„ÇäÂ≠ê‰æõÂêë„Åë„Å´Ôºâ
        const messages = {
          good: '„Çè„Åã„Å£„Åü„Çì„Å†„Å≠ÔºÅ„Åô„Åî„ÅÑÔºÅ üéâ',
          fun: '„Åü„ÅÆ„Åó„Çì„Åß„Åè„Çå„Å¶ „ÅÜ„Çå„Åó„ÅÑ„ÇàÔºÅ üòä',
          difficult: '„ÇÄ„Åö„Åã„Åó„Åã„Å£„Åü„Å≠„ÄÇ„Åæ„Åü „ÅÑ„Å£„Åó„Çá„Å´ „Çà„Çì„Åß„Åø„Çà„ÅÜÔºÅ üìö',
          question: '„ÅÑ„ÅÑ „Åó„Å§„ÇÇ„Çì„Å†„Å≠ÔºÅ„Åä„Å®„ÅÜ„Åï„Çì „Åä„Åã„ÅÇ„Åï„Çì„Å´ „Åç„ÅÑ„Å¶„Åø„Çà„ÅÜÔºÅ ‚ùì'
        };
        
        // Áü≠ÊôÇÈñì„Å†„Åë„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-pulse';
        toast.textContent = messages[reaction as keyof typeof messages] || result.message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 3000);
        
      } else {
        alert(`„Ç®„É©„Éº: ${result.error}`);
      }
    } catch (error) {
      console.error('„É™„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
      alert('„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  const handleMarkAsRead = () => {
    if (article) {
      setArticle({ ...article, hasRead: true });
      alert('„Çà„Çì„Å†„ÇàÔºÅ„Åô„Åî„ÅÑ„Å≠ÔºÅ üéâ');
    }
  };

  const handleQuestionSubmit = async () => {
    if (!questionText.trim()) {
      alert('„Åó„Å§„ÇÇ„Çì„Çí „Åã„ÅÑ„Å¶„Å≠ÔºÅ');
      return;
    }

    try {
      // Ë≥™Âïè„ÇíAPI„Å´ÈÄÅ‰ø°ÔºàË®ò‰∫ãÊÉÖÂ†±„Å®‰∏ÄÁ∑í„Å´Ôºâ
      const response = await fetch(`/api/articles/${articleId}/question`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: questionText,
          childId: 'child1',
          articleTitle: article?.convertedTitle,
          articleSummary: article?.convertedSummary
        }),
      });

      const result = await response.json();
      
      if (result.success) {
        // Ë≥™Âïè„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇÇËøΩÂä†
        handleReaction('question');
        
        // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 bg-pink-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-pulse';
        toast.textContent = '„Åó„Å§„ÇÇ„Çì„Çí „Åä„Åè„Å£„Åü„ÇàÔºÅ„Åä„Å®„ÅÜ„Åï„Çì„Éª„Åä„Åã„ÅÇ„Åï„Çì„Åå „Åì„Åü„Åà„Å¶„Åè„Çå„Çã„Åã„ÇÇÔºÅüí¨';
        document.body.appendChild(toast);
        
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 4000);
        
        // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
        setQuestionText('');
        setShowQuestionForm(false);
        
        // Ë≥™Âïè„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        fetchQuestions(articleId);
      } else {
        alert(`„Ç®„É©„Éº: ${result.error}`);
      }
    } catch (error) {
      console.error('Ë≥™ÂïèÈÄÅ‰ø°„Ç®„É©„Éº:', error);
      alert('„Åó„Å§„ÇÇ„Çì„ÅÆ „Åù„ÅÜ„Åó„Çì„Å°„ÇÖ„ÅÜ„Å´ „Ç®„É©„Éº„Åå „ÅØ„Å£„Åõ„ÅÑ„Åó„Åæ„Åó„Åü');
    }
  };

  const getCategoryEmoji = (category: string) => {
    switch (category) {
      case '„Åã„Åå„Åè':
        return 'üî¨';
      case '„Çπ„Éù„Éº„ÉÑ':
        return '‚öΩ';
      default:
        return 'üì∞';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case '„Åã„Åå„Åè':
        return 'bg-blue-400';
      case '„Çπ„Éù„Éº„ÉÑ':
        return 'bg-green-400';
      default:
        return 'bg-purple-400';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-200 via-pink-200 to-purple-200 flex items-center justify-center">
        <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-12 text-center shadow-lg">
          <div className="text-6xl mb-4 animate-spin">üîÑ</div>
          <h2 className="text-2xl font-bold text-gray-800">
            „Åç„Åò„Çí „Çà„Åø„Åì„Åø„Å°„ÇÖ„ÅÜ...
          </h2>
        </div>
      </div>
    );
  }

  if (!article) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-200 via-pink-200 to-purple-200 flex items-center justify-center">
        <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-12 text-center shadow-lg">
          <div className="text-6xl mb-4">‚ùå</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            „Åç„Åò„Åå „Åø„Å§„Åã„Çâ„Å™„ÅÑ„Çà
          </h2>
          <Link href="/kids" className="bg-blue-500 text-white px-6 py-3 rounded-full font-bold hover:bg-blue-600 transition-colors">
            „Éã„É•„Éº„Çπ„ÅÑ„Å°„Çâ„Çì„Å´ „ÇÇ„Å©„Çã
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-200 via-pink-200 to-purple-200">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="bg-white/90 backdrop-blur-sm sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href={fromParent ? "/parent" : "/kids"} className="flex items-center space-x-2 text-blue-600 hover:text-blue-800 transition-colors">
              <span className="text-2xl">‚Üê</span>
              <span className="font-bold">„ÇÇ„Å©„Çã</span>
            </Link>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowFurigana(!showFurigana)}
                className={`px-4 py-2 rounded-full font-medium transition-colors ${
                  showFurigana ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-600'
                }`}
              >
                „Åµ„Çä„Åå„Å™
              </button>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setFontSize(Math.max(14, fontSize - 2))}
                  className="bg-gray-200 hover:bg-gray-300 p-2 rounded-full transition-colors"
                >
                  A-
                </button>
                <span className="text-sm font-medium">{fontSize}px</span>
                <button
                  onClick={() => setFontSize(Math.min(24, fontSize + 2))}
                  className="bg-gray-200 hover:bg-gray-300 p-2 rounded-full transition-colors"
                >
                  A+
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* Ë®ò‰∫ã„Éò„ÉÉ„ÉÄ„Éº */}
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-6 mb-6 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <span className={`${getCategoryColor(article.category)} text-white px-4 py-2 rounded-full font-medium flex items-center`}>
              <span className="text-lg mr-2">{getCategoryEmoji(article.category)}</span>
              {article.category}
            </span>
            {!article.hasRead && (
              <button
                onClick={handleMarkAsRead}
                className="bg-green-500 text-white px-4 py-2 rounded-full font-medium hover:bg-green-600 transition-colors"
              >
                „Çà„Çì„Å†ÔºÅ
              </button>
            )}
          </div>
          
          <h1 className="text-3xl font-bold text-gray-800 mb-4" style={{ fontSize: fontSize + 8 }}>
            {article.convertedTitle}
          </h1>
          
          <div className="text-gray-600 mb-4">
            <span className="text-lg mr-2">üìÖ</span>
            {new Date(article.createdAt).toLocaleDateString('ja-JP')}
          </div>
        </div>

        {/* Ë®ò‰∫ãÊú¨Êñá */}
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-8 mb-6 shadow-lg">
          <div 
            className="text-gray-800 leading-relaxed"
            style={{ 
              fontSize: fontSize,
              lineHeight: fontSize * 0.08 + 1.4 
            }}
          >
            {article.convertedContent.split('\n').map((paragraph, index) => (
              <p key={index} className={paragraph.trim() ? 'mb-6' : 'mb-3'}>
                {paragraph}
              </p>
            ))}
          </div>
        </div>

        {/* Ë≥™Âïè„Çπ„É¨„ÉÉ„Éâ„Çª„ÇØ„Ç∑„Éß„É≥ */}
        {questions.length > 0 && (
          <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-6 mb-6 shadow-lg">
            <h3 className="text-xl font-bold text-gray-800 mb-4 text-center">
              üí¨ „Åó„Å§„ÇÇ„Çì „Å® „Åä„Å∏„Çì„Åò
            </h3>
            <div className="space-y-4">
              {questions.map((question) => (
                <div key={question.id} className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl p-4 border-l-4 border-purple-400">
                  {/* Â≠ê‰æõ„ÅÆË≥™Âïè */}
                  <div className="flex items-start space-x-3 mb-4">
                    <div className="text-2xl">üëß</div>
                    <div className="flex-1">
                      <div className="bg-purple-200 rounded-2xl p-3">
                        <div className="text-sm text-purple-600 font-medium mb-1">„ÅÇ„Å™„Åü„ÅÆ „Åó„Å§„ÇÇ„Çì:</div>
                        <div className="text-gray-800">{question.question}</div>
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {new Date(question.createdAt).toLocaleString('ja-JP')}
                      </div>
                    </div>
                  </div>
                  
                  {/* Ë¶™„ÅÆÂõûÁ≠î */}
                  {question.status === 'answered' && question.parentAnswer ? (
                    <div className="flex items-start space-x-3">
                      <div className="text-2xl">üë©</div>
                      <div className="flex-1">
                        <div className="bg-green-200 rounded-2xl p-3">
                          <div className="text-sm text-green-600 font-medium mb-1">„Åä„Å®„ÅÜ„Åï„Çì„Éª„Åä„Åã„ÅÇ„Åï„Çì„Åã„Çâ:</div>
                          <div className="text-gray-800">{question.parentAnswer}</div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center space-x-3 text-gray-500">
                      <div className="text-2xl">‚è≥</div>
                      <div className="text-sm">„Åä„Å®„ÅÜ„Åï„Çì„Éª„Åä„Åã„ÅÇ„Åï„Çì„Åå „Åã„Çì„Åå„Åà„Å¶„Åè„Çå„Å¶„ÅÑ„Çã„Çà...</div>
                    </div>
                  )}
                </div>
              ))}
            </div>
            
            {/* ËøΩÂä†Ë≥™Âïè„Éú„Çø„É≥ */}
            <div className="mt-4 text-center">
              <button 
                onClick={() => setShowQuestionForm(true)}
                className="bg-pink-400 hover:bg-pink-500 text-white px-6 py-3 rounded-full font-medium text-sm transition-all duration-300 transform hover:scale-105 shadow-lg"
              >
                „ÇÇ„Å£„Å® „Åó„Å§„ÇÇ„Çì „Åô„Çã ‚ûï
              </button>
            </div>
          </div>
        )}

        {/* „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çª„ÇØ„Ç∑„Éß„É≥ */}
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-6 mb-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-800 mb-4 text-center">
            „Å©„ÅÜ„Å†„Å£„ÅüÔºü
          </h3>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            <button
              onClick={() => handleReaction('good')}
              className={`p-4 rounded-2xl transition-all duration-300 transform hover:scale-105 text-center border-2 ${
                userReactions.includes('good')
                  ? 'bg-green-500 text-white border-green-600 scale-110 shadow-lg'
                  : 'bg-green-100 hover:bg-green-200 border-transparent'
              }`}
            >
              <div className="text-4xl mb-2">üëç</div>
              <div className={`font-medium ${userReactions.includes('good') ? 'text-white' : 'text-green-700'}`}>
                „Çè„Åã„Å£„ÅüÔºÅ
              </div>
            </button>
            <button
              onClick={() => handleReaction('fun')}
              className={`p-4 rounded-2xl transition-all duration-300 transform hover:scale-105 text-center border-2 ${
                userReactions.includes('fun')
                  ? 'bg-yellow-500 text-white border-yellow-600 scale-110 shadow-lg'
                  : 'bg-yellow-100 hover:bg-yellow-200 border-transparent'
              }`}
            >
              <div className="text-4xl mb-2">üòÑ</div>
              <div className={`font-medium ${userReactions.includes('fun') ? 'text-white' : 'text-yellow-700'}`}>
                „Åü„ÅÆ„Åó„ÅÑÔºÅ
              </div>
            </button>
            <button
              onClick={() => handleReaction('difficult')}
              className={`p-4 rounded-2xl transition-all duration-300 transform hover:scale-105 text-center border-2 ${
                userReactions.includes('difficult')
                  ? 'bg-orange-500 text-white border-orange-600 scale-110 shadow-lg'
                  : 'bg-orange-100 hover:bg-orange-200 border-transparent'
              }`}
            >
              <div className="text-4xl mb-2">ü§î</div>
              <div className={`font-medium ${userReactions.includes('difficult') ? 'text-white' : 'text-orange-700'}`}>
                „ÇÄ„Åö„Åã„Åó„ÅÑ
              </div>
            </button>
            <button
              onClick={() => handleReaction('question')}
              className={`p-4 rounded-2xl transition-all duration-300 transform hover:scale-105 text-center border-2 ${
                userReactions.includes('question')
                  ? 'bg-purple-500 text-white border-purple-600 scale-110 shadow-lg'
                  : 'bg-purple-100 hover:bg-purple-200 border-transparent'
              }`}
            >
              <div className="text-4xl mb-2">‚ùì</div>
              <div className={`font-medium ${userReactions.includes('question') ? 'text-white' : 'text-purple-700'}`}>
                „Åó„Å§„ÇÇ„Çì
              </div>
            </button>
          </div>
        </div>

        {/* Ë™≠‰∫ÜË°®Á§∫ */}
        {article.hasRead && (
          <div className="bg-green-100 rounded-3xl p-6 text-center shadow-lg">
            <div className="text-6xl mb-4">üéâ</div>
            <h2 className="text-2xl font-bold text-green-800 mb-2">
              „Çà„Çì„Å†„Å≠ÔºÅ„Åô„Åî„ÅÑÔºÅ
            </h2>
            <p className="text-green-700">
              „Åæ„Åü „ÅÇ„Åü„Çâ„Åó„ÅÑ „Éã„É•„Éº„Çπ„ÇÇ „Çà„Çì„Åß„Åø„Çà„ÅÜÔºÅ
            </p>
          </div>
        )}

        {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
        <div className="mt-8 flex justify-center space-x-4">
          <Link 
            href="/kids" 
            className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-4 rounded-full font-bold text-lg transition-all duration-300 shadow-lg transform hover:scale-105"
          >
            „Éã„É•„Éº„Çπ„ÅÑ„Å°„Çâ„Çì„Å´ „ÇÇ„Å©„Çã
          </Link>
          <button 
            onClick={() => setShowQuestionForm(true)}
            className="bg-pink-500 hover:bg-pink-600 text-white px-8 py-4 rounded-full font-bold text-lg transition-all duration-300 shadow-lg transform hover:scale-105"
          >
            „Åó„Å§„ÇÇ„Çì „Åô„Çã üí¨
          </button>
        </div>

        {/* Ë≥™Âïè„Éï„Ç©„Éº„É†„É¢„Éº„ÉÄ„É´ */}
        {showQuestionForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-3xl p-8 max-w-md w-full shadow-2xl">
              <div className="text-center mb-6">
                <div className="text-6xl mb-4">‚ùì</div>
                <h2 className="text-2xl font-bold text-gray-800">„Åó„Å§„ÇÇ„Çì „Åô„Çã</h2>
                <p className="text-gray-600 mt-2">„Åì„ÅÆ „Åç„Åò„Å´„Å§„ÅÑ„Å¶ „Åç„ÅÑ„Å¶„Åø„Çà„ÅÜÔºÅ</p>
              </div>
              
              {/* Ë®ò‰∫ãÂºïÁî® */}
              <div className="bg-gray-100 rounded-2xl p-4 mb-6">
                <div className="text-sm text-gray-500 mb-2">„Åç„Åò:</div>
                <div className="text-lg font-medium text-gray-800 mb-2">{article?.convertedTitle}</div>
                <div className="text-sm text-gray-600">{article?.convertedSummary}</div>
              </div>
              
              {/* Ë≥™ÂïèÂÖ•Âäõ */}
              <textarea
                value={questionText}
                onChange={(e) => setQuestionText(e.target.value)}
                placeholder="„Å™„Å´„Åå „Åó„Çä„Åü„ÅÑÔºü
„Çå„ÅÑ: „Äå„Å™„Åú „Åì„Çì„Å™„Åì„Å®„Åå „Åä„Åì„Å£„Åü„ÅÆÔºü„Äç"
                className="w-full h-32 p-4 border-2 border-gray-200 rounded-2xl focus:border-pink-400 focus:outline-none resize-none text-lg"
                style={{ fontSize: '18px' }}
              />
              
              {/* „Éú„Çø„É≥ */}
              <div className="flex space-x-4 mt-6">
                <button
                  onClick={() => {
                    setShowQuestionForm(false);
                    setQuestionText('');
                  }}
                  className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-4 rounded-2xl font-bold text-lg transition-colors"
                >
                  „ÇÑ„ÇÅ„Çã
                </button>
                <button
                  onClick={handleQuestionSubmit}
                  className="flex-1 bg-pink-500 hover:bg-pink-600 text-white py-4 rounded-2xl font-bold text-lg transition-colors"
                >
                  „Åä„Åè„Çã üí¨
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}